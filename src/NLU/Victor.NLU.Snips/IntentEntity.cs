// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Victor;
//
//    var response = Response.FromJson(jsonString);

namespace Victor
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class IntentEntity
    {
        [JsonProperty("rawValue")]
        public string RawValue { get; set; }

        [JsonProperty("value")]
        public IntentEntityValue Value { get; set; }

        [JsonProperty("alternatives")]
        public object[] Alternatives { get; set; }

        [JsonProperty("range")]
        public IntentEntityRange Range { get; set; }

        [JsonProperty("entity")]
        public string Entity { get; set; }

        [JsonProperty("slotName")]
        public string SlotName { get; set; }
    }

    public partial class IntentEntityRange
    {
        [JsonProperty("start")]
        public long Start { get; set; }

        [JsonProperty("end")]
        public long End { get; set; }
    }

    public partial class IntentEntityValue
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("value")]
        public string ValueValue { get; set; }
    }

    public partial class IntentEntity
    {
        public static IntentEntity[] FromJson(string json) => JsonConvert.DeserializeObject<IntentEntity[]>(json, Victor.IntentEntityConverter.Settings);
    }

    public static class IntentEntitySerialize
    {
        public static string ToJson(this IntentEntity[] self) => JsonConvert.SerializeObject(self, Victor.IntentEntityConverter.Settings);
    }

    internal static class IntentEntityConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
