// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Victor.CUI.Vish.OpenShift.Models;
//
//    var builds = Builds.FromJson(jsonString);

namespace Victor.CUI.Vish.OpenShift.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Builds
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("apiVersion")]
        public string ApiVersion { get; set; }

        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("reason")]
        public string Reason { get; set; }

        [JsonProperty("details")]
        public Details Details { get; set; }

        [JsonProperty("code")]
        public long Code { get; set; }
    }

    public partial class Details
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }
    }

    public partial class Metadata
    {
    }

    public partial class Builds
    {
        public static Builds FromJson(string json) => JsonConvert.DeserializeObject<Builds>(json, Victor.CUI.Vish.OpenShift.Models.BuildsConverter.Settings);
    }

    public static class BuildsSerialize
    {
        public static string ToJson(this Builds self) => JsonConvert.SerializeObject(self, Victor.CUI.Vish.OpenShift.Models.BuildsConverter.Settings);
    }

    internal static class BuildsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
