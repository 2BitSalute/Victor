// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Victor.CUI.Vish.OpenShift.Models;
//
//    var resources = Resources.FromJson(jsonString);

namespace Victor.CUI.Vish.OpenShift.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Resources
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("groupVersion")]
        public string GroupVersion { get; set; }

        [JsonProperty("resources")]
        public Resource[] ResourcesResources { get; set; }
    }

    public partial class Resource
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("singularName")]
        public string SingularName { get; set; }

        [JsonProperty("namespaced")]
        public bool Namespaced { get; set; }

        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("verbs")]
        public Verb[] Verbs { get; set; }

        [JsonProperty("shortNames", NullValueHandling = NullValueHandling.Ignore)]
        public string[] ShortNames { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public string Group { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    public enum Verb { Create, Delete, Deletecollection, Get, List, Patch, Update, Watch };

    public partial class Resources
    {
        public static Resources FromJson(string json) => JsonConvert.DeserializeObject<Resources>(json, Victor.CUI.Vish.OpenShift.Models.BuildsConverter.Settings);
    }

    public static class ResourcesSerialize
    {
        public static string ToJson(this Resources self) => JsonConvert.SerializeObject(self, Victor.CUI.Vish.OpenShift.Models.BuildsConverter.Settings);
    }

    internal static class ResourcesConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VerbConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VerbConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Verb) || t == typeof(Verb?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "create":
                    return Verb.Create;
                case "delete":
                    return Verb.Delete;
                case "deletecollection":
                    return Verb.Deletecollection;
                case "get":
                    return Verb.Get;
                case "list":
                    return Verb.List;
                case "patch":
                    return Verb.Patch;
                case "update":
                    return Verb.Update;
                case "watch":
                    return Verb.Watch;
            }
            throw new Exception("Cannot unmarshal type Verb");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Verb)untypedValue;
            switch (value)
            {
                case Verb.Create:
                    serializer.Serialize(writer, "create");
                    return;
                case Verb.Delete:
                    serializer.Serialize(writer, "delete");
                    return;
                case Verb.Deletecollection:
                    serializer.Serialize(writer, "deletecollection");
                    return;
                case Verb.Get:
                    serializer.Serialize(writer, "get");
                    return;
                case Verb.List:
                    serializer.Serialize(writer, "list");
                    return;
                case Verb.Patch:
                    serializer.Serialize(writer, "patch");
                    return;
                case Verb.Update:
                    serializer.Serialize(writer, "update");
                    return;
                case Verb.Watch:
                    serializer.Serialize(writer, "watch");
                    return;
            }
            throw new Exception("Cannot marshal type Verb");
        }

        public static readonly VerbConverter Singleton = new VerbConverter();
    }
}
