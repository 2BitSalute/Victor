// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Victor.CUI.RHDM.Model.LoanDemo;
//
//    var loanDemoResponse = LoanDemoResponse.FromJson(jsonString);

namespace Victor.CUI.RHDM.KIE.Model.LoanDemo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LoanDemoResponse
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }

        [JsonProperty("result")]
        public LoanDemoResponseResult Result { get; set; }
    }

    public partial class LoanDemoResponseResult
    {
        [JsonProperty("execution-results")]
        public ExecutionResults ExecutionResults { get; set; }
    }

    public partial class ExecutionResults
    {
        [JsonProperty("results")]
        public ResultElement[] Results { get; set; }

        [JsonProperty("facts")]
        public Fact[] Facts { get; set; }
    }

    public partial class Fact
    {
        [JsonProperty("value")]
        public FactValue Value { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class FactValue
    {
        [JsonProperty("org.drools.core.common.DefaultFactHandle")]
        public OrgDroolsCoreCommonDefaultFactHandle OrgDroolsCoreCommonDefaultFactHandle { get; set; }
    }

    public partial class OrgDroolsCoreCommonDefaultFactHandle
    {
        [JsonProperty("external-form")]
        public string ExternalForm { get; set; }
    }

    public partial class ResultElement
    {
        [JsonProperty("value")]
        public ValueUnion Value { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class ValueElement
    {
        [JsonProperty("com.redhat.demos.dm.loan.model.Applicant", NullValueHandling = NullValueHandling.Ignore)]
        public ComRedhatDemosDmLoanModelApplicant ComRedhatDemosDmLoanModelApplicant { get; set; }

        [JsonProperty("com.redhat.demos.dm.loan.model.Loan", NullValueHandling = NullValueHandling.Ignore)]
        public ComRedhatDemosDmLoanModelLoan ComRedhatDemosDmLoanModelLoan { get; set; }

        [JsonProperty("com.redhat.demos.dm.loan.model.Recommendation", NullValueHandling = NullValueHandling.Ignore)]
        public ComRedhatDemosDmLoanModelRecommendation ComRedhatDemosDmLoanModelRecommendation { get; set; }
    }

    public partial class ComRedhatDemosDmLoanModelApplicant
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("creditScore")]
        public long CreditScore { get; set; }
    }

    public partial class ComRedhatDemosDmLoanModelLoan
    {
        [JsonProperty("amount")]
        public long Amount { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("interestRate")]
        public double InterestRate { get; set; }

        [JsonProperty("approved")]
        public bool Approved { get; set; }

        [JsonProperty("reason")]
        public string Reason { get; set; }
    }

    public partial class ComRedhatDemosDmLoanModelRecommendation
    {
        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class PurpleValue
    {
        [JsonProperty("com.redhat.demos.dm.loan.model.Loan", NullValueHandling = NullValueHandling.Ignore)]
        public ComRedhatDemosDmLoanModelLoan ComRedhatDemosDmLoanModelLoan { get; set; }

        [JsonProperty("com.redhat.demos.dm.loan.model.Applicant", NullValueHandling = NullValueHandling.Ignore)]
        public ComRedhatDemosDmLoanModelApplicant ComRedhatDemosDmLoanModelApplicant { get; set; }
    }

    public partial struct ValueUnion
    {
        public PurpleValue PurpleValue;
        public ValueElement[] ValueElementArray;

        public static implicit operator ValueUnion(PurpleValue PurpleValue) => new ValueUnion { PurpleValue = PurpleValue };
        public static implicit operator ValueUnion(ValueElement[] ValueElementArray) => new ValueUnion { ValueElementArray = ValueElementArray };
    }

    public partial class LoanDemoResponse
    {
        public static LoanDemoResponse FromJson(string json) => JsonConvert.DeserializeObject<LoanDemoResponse>(json, Victor.CUI.RHDM.KIE.Model.LoanDemo.ResponseConverter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LoanDemoResponse self) => JsonConvert.SerializeObject(self, Victor.CUI.RHDM.KIE.Model.LoanDemo.ResponseConverter.Settings);
    }

    internal static class ResponseConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ValueUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleValue>(reader);
                    return new ValueUnion { PurpleValue = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<ValueElement[]>(reader);
                    return new ValueUnion { ValueElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.ValueElementArray != null)
            {
                serializer.Serialize(writer, value.ValueElementArray);
                return;
            }
            if (value.PurpleValue != null)
            {
                serializer.Serialize(writer, value.PurpleValue);
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }
}
