/* 
 * KIE Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Victor.CUI.RHDM.KIE.Client;
using Victor.CUI.RHDM.KIE.Model;

namespace Victor.CUI.RHDM.KIE.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKIEServerAndKIEContainersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activates (previously deactivated) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns></returns>
        void ActivateContainer (string containerId);

        /// <summary>
        /// Activates (previously deactivated) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateContainerWithHttpInfo (string containerId);
        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns></returns>
        void CreateContainer (string containerId, string body);

        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateContainerWithHttpInfo (string containerId, string body);
        /// <summary>
        /// Deactivates (previously started) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns></returns>
        void DeactivateContainer (string containerId);

        /// <summary>
        /// Deactivates (previously started) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateContainerWithHttpInfo (string containerId);
        /// <summary>
        /// Disposes a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns></returns>
        void DisposeContainer (string containerId);

        /// <summary>
        /// Disposes a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisposeContainerWithHttpInfo (string containerId);
        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns></returns>
        void ExecuteCommands (string body);

        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteCommandsWithHttpInfo (string body);
        /// <summary>
        /// Returns information about a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns></returns>
        void GetContainerInfo (string containerId);

        /// <summary>
        /// Returns information about a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContainerInfoWithHttpInfo (string containerId);
        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetInfo ();

        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInfoWithHttpInfo ();
        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns></returns>
        void GetReleaseId (string containerId);

        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetReleaseIdWithHttpInfo (string containerId);
        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns></returns>
        void GetScannerInfo (string containerId);

        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetScannerInfoWithHttpInfo (string containerId);
        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetServerState ();

        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetServerStateWithHttpInfo ();
        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>List&lt;KieMessage&gt;</returns>
        List<HealthCheck> Healthcheck (bool? report = null);

        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;KieMessage&gt;</returns>
        ApiResponse<List<HealthCheck>> HealthcheckWithHttpInfo (bool? report = null);
        /// <summary>
        /// Returns a list of KIE containers on the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns></returns>
        void ListContainers (string groupId = null, string artifactId = null, string version = null, string status = null);

        /// <summary>
        /// Returns a list of KIE containers on the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListContainersWithHttpInfo (string groupId = null, string artifactId = null, string version = null, string status = null);
        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Readycheck ();

        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReadycheckWithHttpInfo ();
        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns></returns>
        void UpdateReleaseId (string containerId, string body, bool? resetBeforeUpdate = null);

        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateReleaseIdWithHttpInfo (string containerId, string body, bool? resetBeforeUpdate = null);
        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns></returns>
        void UpdateScanner (string containerId, string body);

        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateScannerWithHttpInfo (string containerId, string body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activates (previously deactivated) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateContainerAsync (string containerId);

        /// <summary>
        /// Activates (previously deactivated) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateContainerAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateContainerAsync (string containerId, string body);

        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateContainerAsyncWithHttpInfo (string containerId, string body);
        /// <summary>
        /// Deactivates (previously started) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateContainerAsync (string containerId);

        /// <summary>
        /// Deactivates (previously started) KIE container on this server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateContainerAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Disposes a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisposeContainerAsync (string containerId);

        /// <summary>
        /// Disposes a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisposeContainerAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteCommandsAsync (string body);

        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteCommandsAsyncWithHttpInfo (string body);
        /// <summary>
        /// Returns information about a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContainerInfoAsync (string containerId);

        /// <summary>
        /// Returns information about a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContainerInfoAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInfoAsync ();

        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetReleaseIdAsync (string containerId);

        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetReleaseIdAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetScannerInfoAsync (string containerId);

        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetScannerInfoAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetServerStateAsync ();

        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServerStateAsyncWithHttpInfo ();
        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>Task of List&lt;KieMessage&gt;</returns>
        System.Threading.Tasks.Task<List<HealthCheck>> HealthcheckAsync (bool? report = null);

        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;KieMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HealthCheck>>> HealthcheckAsyncWithHttpInfo (bool? report = null);
        /// <summary>
        /// Returns a list of KIE containers on the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListContainersAsync (string groupId = null, string artifactId = null, string version = null, string status = null);

        /// <summary>
        /// Returns a list of KIE containers on the KIE Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListContainersAsyncWithHttpInfo (string groupId = null, string artifactId = null, string version = null, string status = null);
        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReadycheckAsync ();

        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReadycheckAsyncWithHttpInfo ();
        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateReleaseIdAsync (string containerId, string body, bool? resetBeforeUpdate = null);

        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReleaseIdAsyncWithHttpInfo (string containerId, string body, bool? resetBeforeUpdate = null);
        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateScannerAsync (string containerId, string body);

        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScannerAsyncWithHttpInfo (string containerId, string body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KIEServerAndKIEContainersApi : IKIEServerAndKIEContainersApi
    {
        public static IRestResponse LastResponse { get; protected set; }
        
        private Victor.CUI.RHDM.KIE.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KIEServerAndKIEContainersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KIEServerAndKIEContainersApi(String basePath)
        {
            this.Configuration = new Victor.CUI.RHDM.KIE.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Victor.CUI.RHDM.KIE.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KIEServerAndKIEContainersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KIEServerAndKIEContainersApi(Victor.CUI.RHDM.KIE.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Victor.CUI.RHDM.KIE.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Victor.CUI.RHDM.KIE.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Victor.CUI.RHDM.KIE.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Victor.CUI.RHDM.KIE.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activates (previously deactivated) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns></returns>
        public void ActivateContainer (string containerId)
        {
             ActivateContainerWithHttpInfo(containerId);
        }

        /// <summary>
        /// Activates (previously deactivated) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivateContainerWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->ActivateContainer");

            var localVarPath = "/server/containers/{containerId}/status/activated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activates (previously deactivated) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateContainerAsync (string containerId)
        {
             await ActivateContainerAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Activates (previously deactivated) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivateContainerAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->ActivateContainer");

            var localVarPath = "/server/containers/{containerId}/status/activated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns></returns>
        public void CreateContainer (string containerId, string body)
        {
             CreateContainerWithHttpInfo(containerId, body);
        }

        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateContainerWithHttpInfo (string containerId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->CreateContainer");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->CreateContainer");

            var localVarPath = "/server/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateContainerAsync (string containerId, string body)
        {
             await CreateContainerAsyncWithHttpInfo(containerId, body);

        }

        /// <summary>
        /// Creates a new KIE container in the KIE Server with a specified KIE container ID 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be assigned to deployed KIE Container</param>
        /// <param name="body">KIE Container resource to be deployed as KieContainerResource</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateContainerAsyncWithHttpInfo (string containerId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->CreateContainer");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->CreateContainer");

            var localVarPath = "/server/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deactivates (previously started) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns></returns>
        public void DeactivateContainer (string containerId)
        {
             DeactivateContainerWithHttpInfo(containerId);
        }

        /// <summary>
        /// Deactivates (previously started) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivateContainerWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->DeactivateContainer");

            var localVarPath = "/server/containers/{containerId}/status/deactivated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deactivates (previously started) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateContainerAsync (string containerId)
        {
             await DeactivateContainerAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Deactivates (previously started) KIE container on this server 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id of deployed KIE Container</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateContainerAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->DeactivateContainer");

            var localVarPath = "/server/containers/{containerId}/status/deactivated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disposes a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns></returns>
        public void DisposeContainer (string containerId)
        {
             DisposeContainerWithHttpInfo(containerId);
        }

        /// <summary>
        /// Disposes a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisposeContainerWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->DisposeContainer");

            var localVarPath = "/server/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisposeContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disposes a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisposeContainerAsync (string containerId)
        {
             await DisposeContainerAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Disposes a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be disposed (undeployed)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisposeContainerAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->DisposeContainer");

            var localVarPath = "/server/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisposeContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns></returns>
        public void ExecuteCommands (string body)
        {
             ExecuteCommandsWithHttpInfo(body);
        }

        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteCommandsWithHttpInfo (string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->ExecuteCommands");

            var localVarPath = "/server/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteCommands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteCommandsAsync (string body)
        {
             await ExecuteCommandsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Executes one or more KIE Server commands for server-related or container-related operations 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">command script payload</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteCommandsAsyncWithHttpInfo (string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->ExecuteCommands");

            var localVarPath = "/server/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteCommands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns></returns>
        public void GetContainerInfo (string containerId)
        {
             GetContainerInfoWithHttpInfo(containerId);
        }

        /// <summary>
        /// Returns information about a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContainerInfoWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->GetContainerInfo");

            var localVarPath = "/server/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContainerInfoAsync (string containerId)
        {
             await GetContainerInfoAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Returns information about a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id to be retrieved</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContainerInfoAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->GetContainerInfo");

            var localVarPath = "/server/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetInfo ()
        {
             GetInfoWithHttpInfo();
        }

        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInfoWithHttpInfo ()
        {

            var localVarPath = "/server";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInfoAsync ()
        {
             await GetInfoAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns information about the KIE Server. The endpoint for this request is the base URL for the REST API. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/server";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            LastResponse = localVarResponse;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns></returns>
        public void GetReleaseId (string containerId)
        {
             GetReleaseIdWithHttpInfo(containerId);
        }

        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetReleaseIdWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->GetReleaseId");

            var localVarPath = "/server/containers/{containerId}/release-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetReleaseIdAsync (string containerId)
        {
             await GetReleaseIdAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Returns release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be loaded from</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReleaseIdAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->GetReleaseId");

            var localVarPath = "/server/containers/{containerId}/release-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns></returns>
        public void GetScannerInfo (string containerId)
        {
             GetScannerInfoWithHttpInfo(containerId);
        }

        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetScannerInfoWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->GetScannerInfo");

            var localVarPath = "/server/containers/{containerId}/scanner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScannerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetScannerInfoAsync (string containerId)
        {
             await GetScannerInfoAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Returns information about the KIE scanner used for automatic updates in a specified KIE container, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be loaded</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetScannerInfoAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->GetScannerInfo");

            var localVarPath = "/server/containers/{containerId}/scanner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScannerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetServerState ()
        {
             GetServerStateWithHttpInfo();
        }

        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetServerStateWithHttpInfo ()
        {

            var localVarPath = "/server/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetServerStateAsync ()
        {
             await GetServerStateAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns information about the current state and configurations of the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetServerStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/server/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>List&lt;KieMessage&gt;</returns>
        public List<HealthCheck> Healthcheck (bool? report = null)
        {
             ApiResponse<List<HealthCheck>> localVarResponse = HealthcheckWithHttpInfo(report);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;KieMessage&gt;</returns>
        public ApiResponse< List<HealthCheck> > HealthcheckWithHttpInfo (bool? report = null)
        {

            var localVarPath = "/server/healthcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (report != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "report", report)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Healthcheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HealthCheck>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HealthCheck>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HealthCheck>)));
        }

        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>Task of List&lt;KieMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<HealthCheck>> HealthcheckAsync (bool? report = null)
        {
             ApiResponse<List<HealthCheck>> localVarResponse = await HealthcheckAsyncWithHttpInfo(report);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Liveness check for KIE Server that validates both kie server and all extensions, optionally produces report 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">optional report flag to return detailed report of the check, defaults to false (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;KieMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HealthCheck>>> HealthcheckAsyncWithHttpInfo (bool? report = null)
        {

            var localVarPath = "/server/healthcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (report != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "report", report)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Healthcheck", localVarResponse);
                if (exception != null) throw exception;
            }
            LastResponse = localVarResponse;
            return new ApiResponse<List<HealthCheck>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<HealthCheck>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HealthCheck>)));
        }

        /// <summary>
        /// Returns a list of KIE containers on the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns></returns>
        public void ListContainers (string groupId = null, string artifactId = null, string version = null, string status = null)
        {
             ListContainersWithHttpInfo(groupId, artifactId, version, status);
        }

        /// <summary>
        /// Returns a list of KIE containers on the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListContainersWithHttpInfo (string groupId = null, string artifactId = null, string version = null, string status = null)
        {

            var localVarPath = "/server/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (artifactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "artifactId", artifactId)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListContainers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns a list of KIE containers on the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListContainersAsync (string groupId = null, string artifactId = null, string version = null, string status = null)
        {
             await ListContainersAsyncWithHttpInfo(groupId, artifactId, version, status);

        }

        /// <summary>
        /// Returns a list of KIE containers on the KIE Server. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">optional groupId to filter containers by (optional)</param>
        /// <param name="artifactId">optional artifactId to filter containers by (optional)</param>
        /// <param name="version">optional version to filter containers by (optional)</param>
        /// <param name="status">optional status to filter containers by (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListContainersAsyncWithHttpInfo (string groupId = null, string artifactId = null, string version = null, string status = null)
        {

            var localVarPath = "/server/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (artifactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "artifactId", artifactId)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListContainers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Readycheck ()
        {
             ReadycheckWithHttpInfo();
        }

        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReadycheckWithHttpInfo ()
        {

            var localVarPath = "/server/readycheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Readycheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReadycheckAsync ()
        {
             await ReadycheckAsyncWithHttpInfo();

        }

        /// <summary>
        /// Readiness check for KIE Server that indicates that server is fully booted and ready to accept requests 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReadycheckAsyncWithHttpInfo ()
        {

            var localVarPath = "/server/readycheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Readycheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns></returns>
        public void UpdateReleaseId (string containerId, string body, bool? resetBeforeUpdate = null)
        {
             UpdateReleaseIdWithHttpInfo(containerId, body, resetBeforeUpdate);
        }

        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateReleaseIdWithHttpInfo (string containerId, string body, bool? resetBeforeUpdate = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->UpdateReleaseId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->UpdateReleaseId");

            var localVarPath = "/server/containers/{containerId}/release-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (resetBeforeUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resetBeforeUpdate", resetBeforeUpdate)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReleaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateReleaseIdAsync (string containerId, string body, bool? resetBeforeUpdate = null)
        {
             await UpdateReleaseIdAsyncWithHttpInfo(containerId, body, resetBeforeUpdate);

        }

        /// <summary>
        /// Updates release ID information (group ID, artifact ID, version) for a specified KIE container. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id that release id should be upgraded</param>
        /// <param name="body">Release Id to be upgraded to as ReleaseId type</param>
        /// <param name="resetBeforeUpdate">Determines whether active processes are aborted (reset) before updating when the server runs in development mode (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReleaseIdAsyncWithHttpInfo (string containerId, string body, bool? resetBeforeUpdate = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->UpdateReleaseId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->UpdateReleaseId");

            var localVarPath = "/server/containers/{containerId}/release-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (resetBeforeUpdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resetBeforeUpdate", resetBeforeUpdate)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReleaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns></returns>
        public void UpdateScanner (string containerId, string body)
        {
             UpdateScannerWithHttpInfo(containerId, body);
        }

        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateScannerWithHttpInfo (string containerId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->UpdateScanner");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->UpdateScanner");

            var localVarPath = "/server/containers/{containerId}/scanner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScanner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateScannerAsync (string containerId, string body)
        {
             await UpdateScannerAsyncWithHttpInfo(containerId, body);

        }

        /// <summary>
        /// Starts or stops a KIE scanner that controls polling for updated KIE container deployments, if applicable. 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Container id for scanner to be updated</param>
        /// <param name="body">Scanner information given as KieScannerResource type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScannerAsyncWithHttpInfo (string containerId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling KIEServerAndKIEContainersApi->UpdateScanner");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KIEServerAndKIEContainersApi->UpdateScanner");

            var localVarPath = "/server/containers/{containerId}/scanner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScanner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
