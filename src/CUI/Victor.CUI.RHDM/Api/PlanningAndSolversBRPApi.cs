/* 
 * KIE Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Victor.CUI.RHDM.KIE.Client;
using Victor.CUI.RHDM.KIE.Model;

namespace Victor.CUI.RHDM.KIE.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlanningAndSolversBRPApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds problem fact changes to given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns></returns>
        void AddProblemFactChanges (string containerId, string solverId, string body);

        /// <summary>
        /// Adds problem fact changes to given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddProblemFactChangesWithHttpInfo (string containerId, string solverId, string body);
        /// <summary>
        /// Creates solver within given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>SolverInstance</returns>
        SolverInstance CreateSolver (string containerId, string solverId, string body);

        /// <summary>
        /// Creates solver within given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>ApiResponse of SolverInstance</returns>
        ApiResponse<SolverInstance> CreateSolverWithHttpInfo (string containerId, string solverId, string body);
        /// <summary>
        /// Disposes given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns></returns>
        void DisposeSolver (string containerId, string solverId);

        /// <summary>
        /// Disposes given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisposeSolverWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Retrieves solver by its identifier from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>SolverInstance</returns>
        SolverInstance GetSolver (string containerId, string solverId);

        /// <summary>
        /// Retrieves solver by its identifier from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of SolverInstance</returns>
        ApiResponse<SolverInstance> GetSolverWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Retrieves best solution from solver within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>SolverInstance</returns>
        SolverInstance GetSolverWithBestSolution (string containerId, string solverId);

        /// <summary>
        /// Retrieves best solution from solver within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of SolverInstance</returns>
        ApiResponse<SolverInstance> GetSolverWithBestSolutionWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Retrieves solvers from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>Solvers</returns>
        Solvers GetSolvers (string containerId);

        /// <summary>
        /// Retrieves solvers from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>ApiResponse of Solvers</returns>
        ApiResponse<Solvers> GetSolversWithHttpInfo (string containerId);
        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>bool?</returns>
        bool? IsEveryProblemFactChangeProcessed (string containerId, string solverId);

        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IsEveryProblemFactChangeProcessedWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Solves given planning problem with given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns></returns>
        void SolvePlanningProblem (string containerId, string solverId, string body);

        /// <summary>
        /// Solves given planning problem with given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SolvePlanningProblemWithHttpInfo (string containerId, string solverId, string body);
        /// <summary>
        /// Terminates early running solver with given id within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns></returns>
        void TerminateSolverEarly (string containerId, string solverId);

        /// <summary>
        /// Terminates early running solver with given id within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TerminateSolverEarlyWithHttpInfo (string containerId, string solverId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds problem fact changes to given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddProblemFactChangesAsync (string containerId, string solverId, string body);

        /// <summary>
        /// Adds problem fact changes to given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddProblemFactChangesAsyncWithHttpInfo (string containerId, string solverId, string body);
        /// <summary>
        /// Creates solver within given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>Task of SolverInstance</returns>
        System.Threading.Tasks.Task<SolverInstance> CreateSolverAsync (string containerId, string solverId, string body);

        /// <summary>
        /// Creates solver within given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>Task of ApiResponse (SolverInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolverInstance>> CreateSolverAsyncWithHttpInfo (string containerId, string solverId, string body);
        /// <summary>
        /// Disposes given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisposeSolverAsync (string containerId, string solverId);

        /// <summary>
        /// Disposes given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisposeSolverAsyncWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Retrieves solver by its identifier from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of SolverInstance</returns>
        System.Threading.Tasks.Task<SolverInstance> GetSolverAsync (string containerId, string solverId);

        /// <summary>
        /// Retrieves solver by its identifier from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse (SolverInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolverInstance>> GetSolverAsyncWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Retrieves best solution from solver within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of SolverInstance</returns>
        System.Threading.Tasks.Task<SolverInstance> GetSolverWithBestSolutionAsync (string containerId, string solverId);

        /// <summary>
        /// Retrieves best solution from solver within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse (SolverInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolverInstance>> GetSolverWithBestSolutionAsyncWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Retrieves solvers from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>Task of Solvers</returns>
        System.Threading.Tasks.Task<Solvers> GetSolversAsync (string containerId);

        /// <summary>
        /// Retrieves solvers from given container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>Task of ApiResponse (Solvers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Solvers>> GetSolversAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IsEveryProblemFactChangeProcessedAsync (string containerId, string solverId);

        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IsEveryProblemFactChangeProcessedAsyncWithHttpInfo (string containerId, string solverId);
        /// <summary>
        /// Solves given planning problem with given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SolvePlanningProblemAsync (string containerId, string solverId, string body);

        /// <summary>
        /// Solves given planning problem with given solver
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SolvePlanningProblemAsyncWithHttpInfo (string containerId, string solverId, string body);
        /// <summary>
        /// Terminates early running solver with given id within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TerminateSolverEarlyAsync (string containerId, string solverId);

        /// <summary>
        /// Terminates early running solver with given id within container
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TerminateSolverEarlyAsyncWithHttpInfo (string containerId, string solverId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlanningAndSolversBRPApi : IPlanningAndSolversBRPApi
    {
        private Victor.CUI.RHDM.KIE.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlanningAndSolversBRPApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlanningAndSolversBRPApi(String basePath)
        {
            this.Configuration = new Victor.CUI.RHDM.KIE.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Victor.CUI.RHDM.KIE.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlanningAndSolversBRPApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlanningAndSolversBRPApi(Victor.CUI.RHDM.KIE.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Victor.CUI.RHDM.KIE.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Victor.CUI.RHDM.KIE.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Victor.CUI.RHDM.KIE.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Victor.CUI.RHDM.KIE.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds problem fact changes to given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns></returns>
        public void AddProblemFactChanges (string containerId, string solverId, string body)
        {
             AddProblemFactChangesWithHttpInfo(containerId, solverId, body);
        }

        /// <summary>
        /// Adds problem fact changes to given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProblemFactChangesWithHttpInfo (string containerId, string solverId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->AddProblemFactChanges");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->AddProblemFactChanges");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlanningAndSolversBRPApi->AddProblemFactChanges");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/problemfactchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProblemFactChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds problem fact changes to given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProblemFactChangesAsync (string containerId, string solverId, string body)
        {
             await AddProblemFactChangesAsyncWithHttpInfo(containerId, solverId, body);

        }

        /// <summary>
        /// Adds problem fact changes to given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">Problem fact changes, either single one or a list of them</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProblemFactChangesAsyncWithHttpInfo (string containerId, string solverId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->AddProblemFactChanges");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->AddProblemFactChanges");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlanningAndSolversBRPApi->AddProblemFactChanges");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/problemfactchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProblemFactChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates solver within given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>SolverInstance</returns>
        public SolverInstance CreateSolver (string containerId, string solverId, string body)
        {
             ApiResponse<SolverInstance> localVarResponse = CreateSolverWithHttpInfo(containerId, solverId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates solver within given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>ApiResponse of SolverInstance</returns>
        public ApiResponse< SolverInstance > CreateSolverWithHttpInfo (string containerId, string solverId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->CreateSolver");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->CreateSolver");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlanningAndSolversBRPApi->CreateSolver");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSolver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolverInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolverInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolverInstance)));
        }

        /// <summary>
        /// Creates solver within given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>Task of SolverInstance</returns>
        public async System.Threading.Tasks.Task<SolverInstance> CreateSolverAsync (string containerId, string solverId, string body)
        {
             ApiResponse<SolverInstance> localVarResponse = await CreateSolverAsyncWithHttpInfo(containerId, solverId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates solver within given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver config resides</param>
        /// <param name="solverId">identifier of the solver to create</param>
        /// <param name="body">solver instance details as SolverInstance type</param>
        /// <returns>Task of ApiResponse (SolverInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolverInstance>> CreateSolverAsyncWithHttpInfo (string containerId, string solverId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->CreateSolver");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->CreateSolver");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlanningAndSolversBRPApi->CreateSolver");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSolver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolverInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolverInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolverInstance)));
        }

        /// <summary>
        /// Disposes given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns></returns>
        public void DisposeSolver (string containerId, string solverId)
        {
             DisposeSolverWithHttpInfo(containerId, solverId);
        }

        /// <summary>
        /// Disposes given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisposeSolverWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->DisposeSolver");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->DisposeSolver");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisposeSolver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disposes given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisposeSolverAsync (string containerId, string solverId)
        {
             await DisposeSolverAsyncWithHttpInfo(containerId, solverId);

        }

        /// <summary>
        /// Disposes given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisposeSolverAsyncWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->DisposeSolver");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->DisposeSolver");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisposeSolver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves solver by its identifier from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>SolverInstance</returns>
        public SolverInstance GetSolver (string containerId, string solverId)
        {
             ApiResponse<SolverInstance> localVarResponse = GetSolverWithHttpInfo(containerId, solverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves solver by its identifier from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of SolverInstance</returns>
        public ApiResponse< SolverInstance > GetSolverWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->GetSolver");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->GetSolver");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSolver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolverInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolverInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolverInstance)));
        }

        /// <summary>
        /// Retrieves solver by its identifier from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of SolverInstance</returns>
        public async System.Threading.Tasks.Task<SolverInstance> GetSolverAsync (string containerId, string solverId)
        {
             ApiResponse<SolverInstance> localVarResponse = await GetSolverAsyncWithHttpInfo(containerId, solverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves solver by its identifier from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse (SolverInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolverInstance>> GetSolverAsyncWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->GetSolver");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->GetSolver");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSolver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolverInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolverInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolverInstance)));
        }

        /// <summary>
        /// Retrieves best solution from solver within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>SolverInstance</returns>
        public SolverInstance GetSolverWithBestSolution (string containerId, string solverId)
        {
             ApiResponse<SolverInstance> localVarResponse = GetSolverWithBestSolutionWithHttpInfo(containerId, solverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves best solution from solver within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of SolverInstance</returns>
        public ApiResponse< SolverInstance > GetSolverWithBestSolutionWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->GetSolverWithBestSolution");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->GetSolverWithBestSolution");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/bestsolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSolverWithBestSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolverInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolverInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolverInstance)));
        }

        /// <summary>
        /// Retrieves best solution from solver within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of SolverInstance</returns>
        public async System.Threading.Tasks.Task<SolverInstance> GetSolverWithBestSolutionAsync (string containerId, string solverId)
        {
             ApiResponse<SolverInstance> localVarResponse = await GetSolverWithBestSolutionAsyncWithHttpInfo(containerId, solverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves best solution from solver within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse (SolverInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolverInstance>> GetSolverWithBestSolutionAsyncWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->GetSolverWithBestSolution");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->GetSolverWithBestSolution");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/bestsolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSolverWithBestSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolverInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolverInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolverInstance)));
        }

        /// <summary>
        /// Retrieves solvers from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>Solvers</returns>
        public Solvers GetSolvers (string containerId)
        {
             ApiResponse<Solvers> localVarResponse = GetSolversWithHttpInfo(containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves solvers from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>ApiResponse of Solvers</returns>
        public ApiResponse< Solvers > GetSolversWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->GetSolvers");

            var localVarPath = "/server/containers/{containerId}/solvers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSolvers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Solvers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Solvers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Solvers)));
        }

        /// <summary>
        /// Retrieves solvers from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>Task of Solvers</returns>
        public async System.Threading.Tasks.Task<Solvers> GetSolversAsync (string containerId)
        {
             ApiResponse<Solvers> localVarResponse = await GetSolversAsyncWithHttpInfo(containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves solvers from given container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solvers reside</param>
        /// <returns>Task of ApiResponse (Solvers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Solvers>> GetSolversAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->GetSolvers");

            var localVarPath = "/server/containers/{containerId}/solvers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSolvers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Solvers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Solvers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Solvers)));
        }

        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>bool?</returns>
        public bool? IsEveryProblemFactChangeProcessed (string containerId, string solverId)
        {
             ApiResponse<bool?> localVarResponse = IsEveryProblemFactChangeProcessedWithHttpInfo(containerId, solverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IsEveryProblemFactChangeProcessedWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->IsEveryProblemFactChangeProcessed");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->IsEveryProblemFactChangeProcessed");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/problemfactchanges/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsEveryProblemFactChangeProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IsEveryProblemFactChangeProcessedAsync (string containerId, string solverId)
        {
             ApiResponse<bool?> localVarResponse = await IsEveryProblemFactChangeProcessedAsyncWithHttpInfo(containerId, solverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves status if problem fact changes have been processed in given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IsEveryProblemFactChangeProcessedAsyncWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->IsEveryProblemFactChangeProcessed");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->IsEveryProblemFactChangeProcessed");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/problemfactchanges/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsEveryProblemFactChangeProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Solves given planning problem with given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns></returns>
        public void SolvePlanningProblem (string containerId, string solverId, string body)
        {
             SolvePlanningProblemWithHttpInfo(containerId, solverId, body);
        }

        /// <summary>
        /// Solves given planning problem with given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SolvePlanningProblemWithHttpInfo (string containerId, string solverId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->SolvePlanningProblem");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->SolvePlanningProblem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlanningAndSolversBRPApi->SolvePlanningProblem");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/state/solving";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SolvePlanningProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Solves given planning problem with given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SolvePlanningProblemAsync (string containerId, string solverId, string body)
        {
             await SolvePlanningProblemAsyncWithHttpInfo(containerId, solverId, body);

        }

        /// <summary>
        /// Solves given planning problem with given solver 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <param name="body">planning problem</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SolvePlanningProblemAsyncWithHttpInfo (string containerId, string solverId, string body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->SolvePlanningProblem");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->SolvePlanningProblem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlanningAndSolversBRPApi->SolvePlanningProblem");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/state/solving";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SolvePlanningProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Terminates early running solver with given id within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns></returns>
        public void TerminateSolverEarly (string containerId, string solverId)
        {
             TerminateSolverEarlyWithHttpInfo(containerId, solverId);
        }

        /// <summary>
        /// Terminates early running solver with given id within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TerminateSolverEarlyWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->TerminateSolverEarly");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->TerminateSolverEarly");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/state/terminating-early";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TerminateSolverEarly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Terminates early running solver with given id within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TerminateSolverEarlyAsync (string containerId, string solverId)
        {
             await TerminateSolverEarlyAsyncWithHttpInfo(containerId, solverId);

        }

        /// <summary>
        /// Terminates early running solver with given id within container 
        /// </summary>
        /// <exception cref="Victor.CUI.RHDM.KIE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">container id where the solver resides</param>
        /// <param name="solverId">identifier of the solver</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TerminateSolverEarlyAsyncWithHttpInfo (string containerId, string solverId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling PlanningAndSolversBRPApi->TerminateSolverEarly");
            // verify the required parameter 'solverId' is set
            if (solverId == null)
                throw new ApiException(400, "Missing required parameter 'solverId' when calling PlanningAndSolversBRPApi->TerminateSolverEarly");

            var localVarPath = "/server/containers/{containerId}/solvers/{solverId}/state/terminating-early";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (solverId != null) localVarPathParams.Add("solverId", this.Configuration.ApiClient.ParameterToString(solverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TerminateSolverEarly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
