/* 
 * KIE Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Victor.CUI.RHDM.KIE.Client;
using Victor.CUI.RHDM.KIE.Api;
using Victor.CUI.RHDM.KIE.Model.LoanDemo;

namespace Victor.Tests.RHDM
{
    /// <summary>
    ///  Class for testing KIESessionAssetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class KIESessionAssetsApiTests
    {
        private KIESessionAssetsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            var config = new Configuration();
            config.BasePath = Api.Config("KIE_SERVER_URL");
            config.Username = Api.Config("KIE_ADMIN_USER");
            config.Password = Api.Config("KIE_ADMIN_PWD"); 
            config.ApiClient.RestClient.Authenticator = new RestSharp.Authenticators.HttpBasicAuthenticator(config.Username, config.Password);
            instance = new KIESessionAssetsApi(config);
            //instance.Configuration.ApiClient.RestClient.Authenticator = new RestSharp.Authenticators.HttpBasicAuthenticator(config.Username, config.Password); 
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of KIESessionAssetsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' KIESessionAssetsApi
            //Assert.IsInstanceOfType(typeof(KIESessionAssetsApi), instance, "instance is a KIESessionAssetsApi");
        }


        /// <summary>
        /// Test ManageContainer
        /// </summary>
        [Test]
        public void ExecuteContainerRulesTest()
        {
            string body = File.ReadAllText("loan-demo.example.json");
            Assert.False(string.IsNullOrEmpty(body));
            var r = instance.ExecuteContainerRules("loan-application_1.1.0", body);
            
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string body = null;
            //var response = instance.ManageContainer(containerId, body);
            //Assert.IsInstanceOf<Response> (response, "response is Response");
            /*
            var lr = new LoanDemoRequest()
            {
                Lookup = "",
                Commands = new Command[]
                {
                    new Command()
                    {
                        Insert = new InsertLoanApplicant()
                        {
                            Object = new LoanApplicant()
                            {
                                ComRedhatDemosDmLoanModelApplicant = new Applicant()
                                {
                                    Name = "Jim",
                                    CreditScore = 400
                                }
                            }
                        },
                        FireAllRules = new Dispose(),
                        GetObjects = new GetObjects() { OutIdentifier = "applicant"},
                        
                    },
                    new Command()
                    {
                        Insert = new Ins
                        {

                        }
                    }
                }
            };*/
           /*
            dynamic
            Dictionary<string, object> commands = new Dictionary<string, object>() {
                {"Lookup", "" },
                {"commands", new Dictionary<string, object>( m,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{
                        "insert", new Dictionary<string, object>()
                        {

                        }
                    }
                }
            };
            */
        
            //instance.ExecuteContainerRules("loan-application_1.1.0", )
        }
        
    }

}
